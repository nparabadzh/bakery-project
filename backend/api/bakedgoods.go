package api

import (
	"bakery-project/entities"
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"log"
)

type BakedGoodsRepoMySql struct {
	db *sql.DB
}

func (u BakedGoodsRepoMySql) FindAll(start, count int) ([]entities.BakedGood, error) {
	statement := "SELECT * FROM bakedGoods LIMIT ? OFFSET ?"
	rows, err := u.db.Query(statement, count, start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	bakedGoods := []entities.BakedGood{}
	for rows.Next() {
		var bakedGood entities.BakedGood
		err := rows.Scan(&bakedGood.ID, &bakedGood.Name, &bakedGood.PhotoUrl, &bakedGood.Price)
		if err != nil {
			return nil, err
		}
		bakedGoods = append(bakedGoods, bakedGood)
	}
	rows.Close()
	if err = rows.Err(); err != nil {
		return nil, err
	}
	return bakedGoods, nil
}

//FindById return bakedgoods by baked good ID or error otherwise
func (u *BakedGoodsRepoMySql) FindByID(id int) (*entities.BakedGood, error) {
	bakedGood := &entities.BakedGood{}
	statement := "SELECT * from bakedGoods WHERE id = ?"
	err := u.db.QueryRow(statement, id).Scan(&bakedGood.ID, &bakedGood.Name, &bakedGood.PhotoUrl, &bakedGood.Price)
	if err != nil {
		return nil, err
	}
	statement = "SELECT tagId from bakedGoodsTags WHERE bakedGoodId = ?"
	err = u.db.QueryRow(statement, bakedGood.ID).Scan(&bakedGood.TagsIds)
	if err != nil {
		return nil, err
	}
	return bakedGood, nil
}

//Create creates and returns new baked good with autogenerated ID
func (u *BakedGoodsRepoMySql) Create(bakedGood *entities.BakedGood) (*entities.BakedGood, error) {
	statement := "INSERT INTO bakedGoods(name, photoUrl, price) VALUES( ?, ?, ?)"
	result, err := u.db.Exec(statement, bakedGood.Name, &bakedGood.PhotoUrl, &bakedGood.Price)
	if err != nil {
		return nil, err
	}
	id, err := result.LastInsertId()
	bakedGood.ID = int64(id)
	for tag := range bakedGood.TagsIds {
		statement = "INSERT INTO bakedGoodsTags(tagId, bakedGoodId) VALUES( ?, ?)"
		result, err = u.db.Exec(statement, bakedGood.TagsIds[tag], bakedGood.ID)
		if err != nil {
			return nil, err
		}
	}
	//err = r.db.QueryRow("SELECT LAST_INSERT_ID()").Scan(&user.ID)
	if err != nil {
		return nil, err
	}
	return bakedGood, nil
}

//Update updates existing baked good data
func (u *BakedGoodsRepoMySql) Update(bakedGood *entities.BakedGood) (*entities.BakedGood, error) {
	statement := "UPDATE bakedGoods SET name=?, photoUrl=?, price=? WHERE id=? "
	_, err := u.db.Exec(statement, bakedGood.Name, &bakedGood.PhotoUrl, &bakedGood.Price, &bakedGood.ID)
	if err != nil {
		return nil, err
	}
	return u.FindByID(int(bakedGood.ID))
}

//DeleteById removes and returns bakedGood with specified ID or error otherwise
func (u *BakedGoodsRepoMySql) DeleteByID(id int) (*entities.BakedGood, error) {
	bakedGood, err := u.FindByID(id)
	if err != nil {
		return nil, err
	}
	_, err = u.db.Exec("DELETE FROM bakedGoods WHERE id=?", id)
	return bakedGood, err
}

func NewBakedGoodsRepoMysql(user, password, dbname string) *BakedGoodsRepoMySql {
	connectionString := fmt.Sprintf("%s:%s@/%s?parseTime=true", user, password, dbname)
	repo := &BakedGoodsRepoMySql{}
	var err error
	repo.db, err = sql.Open("mysql", connectionString)
	if err != nil {
		log.Fatal(err)
	}
	return repo
}

func (u BakedGoodsRepoMySql) FindByName(name string) (*entities.BakedGood, error) {
	bakedGood := &entities.BakedGood{}
	statement := "SELECT name, photoUrl, price FROM bakedGoods WHERE name=?"
	err := u.db.QueryRow(statement, name).Scan(&bakedGood.ID, &bakedGood.Name, &bakedGood.PhotoUrl, &bakedGood.Price)
	if err != nil {
		return nil, err
	}
	return bakedGood, nil
}

//Count returns the count of users in DB
func (u *BakedGoodsRepoMySql) Count() (int, error) {
	var count int
	err := u.db.QueryRow("SELECT COUNT(*) FROM bakedGoods").Scan(&count)
	if err != nil {
		return 0, err
	}
	return count, nil

}
