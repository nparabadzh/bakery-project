package api

import (
	"bakery-project/entities"
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"log"
)

type OrdersRepoMySql struct {
	db *sql.DB
}

func (u OrdersRepoMySql) FindAll(start, count int) ([]entities.Order, error) {
	statement := "SELECT * FROM orders LIMIT ? OFFSET ?"
	rows, err := u.db.Query(statement, count, start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	orders := []entities.Order{}
	for rows.Next() {
		var order entities.Order
		err := rows.Scan(&order.ID, &order.UserId, &order.Status, &order.DeliveryAddress)
		if err != nil {
			return nil, err
		}
		orders = append(orders, order)
	}
	rows.Close()
	if err = rows.Err(); err != nil {
		return nil, err
	}
	return orders, nil
}

//FindById return orders by order ID or error otherwise
func (u *OrdersRepoMySql) FindByID(id int) (*entities.Order, error) {
	order := &entities.Order{}
	statement := "SELECT * from orders WHERE id = ?"
	err := u.db.QueryRow(statement, id).Scan(&order.ID, &order.UserId, &order.Status, &order.DeliveryAddress)
	if err != nil {
		return nil, err
	}
	return order, nil
}

//Create creates and returns new order with autogenerated ID
func (u *OrdersRepoMySql) Create(order *entities.Order) (*entities.Order, error) {
	statement := "INSERT INTO orders(userId, status, deliveryAddress) VALUES( ?, ?, ?)"
	result, err := u.db.Exec(statement, order.UserId, order.Status, order.DeliveryAddress)
	if err != nil {
		return nil, err
	}
	id, err := result.LastInsertId()
	order.ID = int(id)
	//err = r.db.QueryRow("SELECT LAST_INSERT_ID()").Scan(&user.ID)
	if err != nil {
		return nil, err
	}
	return order, nil
}

//Update updates existing order data
func (u *OrdersRepoMySql) Update(order *entities.Order) (*entities.Order, error) {
	statement := "UPDATE orders SET userId=?, deliveryAddress=?, status=? WHERE id=? "
	_, err := u.db.Exec(statement, order.UserId, order.DeliveryAddress, order.Status, order.ID)
	if err != nil {
		return nil, err
	}
	return u.FindByID(int(order.ID))
}

//DeleteById removes and returns order with specified ID or error otherwise
func (u *OrdersRepoMySql) DeleteByID(id int) (*entities.Order, error) {
	order, err := u.FindByID(id)
	if err != nil {
		return nil, err
	}
	_, err = u.db.Exec("DELETE FROM orders WHERE id=?", id)
	return order, err
}

func NewOrdersRepoMysql(user, password, dbname string) *OrdersRepoMySql {
	connectionString := fmt.Sprintf("%s:%s@/%s?parseTime=true", user, password, dbname)
	repo := &OrdersRepoMySql{}
	var err error
	repo.db, err = sql.Open("mysql", connectionString)
	if err != nil {
		log.Fatal(err)
	}
	return repo
}

func (u OrdersRepoMySql) FindByUserId(userId int) (*entities.Order, error) {
	order := &entities.Order{}
	statement := "SELECT userId, deliveryAddress, status FROM orders WHERE userId=?"
	err := u.db.QueryRow(statement, userId).Scan(&order.UserId, &order.DeliveryAddress, &order.Status)
	if err != nil {
		return nil, err
	}
	return order, nil
}
