package api

import (
	"bakery-project/entities"
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"log"
)

type ReviewsRepoMySql struct {
	db *sql.DB
}

func (u ReviewsRepoMySql) FindAll(start, count int) ([]entities.Review, error) {
	statement := "SELECT * FROM reviews LIMIT ? OFFSET ?"
	rows, err := u.db.Query(statement, count, start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	reviews := []entities.Review{}
	for rows.Next() {
		var review entities.Review
		err := rows.Scan(&review.ID, &review.UserId, &review.ReviewText)
		if err != nil {
			return nil, err
		}
		reviews = append(reviews, review)
	}
	rows.Close()
	if err = rows.Err(); err != nil {
		return nil, err
	}
	return reviews, nil
}

//FindById return orders by order ID or error otherwise
func (u *ReviewsRepoMySql) FindByID(id int) (*entities.Review, error) {
	review := &entities.Review{}
	statement := "SELECT * from reviews WHERE id = ?"
	err := u.db.QueryRow(statement, id).Scan(&review.ID, &review.UserId, &review.ReviewText)
	if err != nil {
		return nil, err
	}
	return review, nil
}

//Create creates and returns new order with autogenerated ID
func (u *ReviewsRepoMySql) Create(review *entities.Review) (*entities.Review, error) {
	statement := "INSERT INTO reviews(userId, reviewText) VALUES( ?, ?)"
	result, err := u.db.Exec(statement, review.UserId, review.ReviewText)
	if err != nil {
		return nil, err
	}
	id, err := result.LastInsertId()
	review.ID = id
	//err = r.db.QueryRow("SELECT LAST_INSERT_ID()").Scan(&user.ID)
	if err != nil {
		return nil, err
	}
	return review, nil
}

//Update updates existing order data
func (u *ReviewsRepoMySql) Update(review *entities.Review) (*entities.Review, error) {
	statement := "UPDATE reviews SET reviewText=? WHERE id=? "
	_, err := u.db.Exec(statement, review.ReviewText, review.ID)
	if err != nil {
		return nil, err
	}
	return u.FindByID(int(review.ID))
}

//DeleteById removes and returns order with specified ID or error otherwise
func (u *ReviewsRepoMySql) DeleteByID(id int) (*entities.Review, error) {
	review, err := u.FindByID(id)
	if err != nil {
		return nil, err
	}
	_, err = u.db.Exec("DELETE FROM reviews WHERE id=?", id)
	return review, err
}

func NewReviewsRepoMysql(user, password, dbname string) *ReviewsRepoMySql {
	connectionString := fmt.Sprintf("%s:%s@/%s?parseTime=true", user, password, dbname)
	repo := &ReviewsRepoMySql{}
	var err error
	repo.db, err = sql.Open("mysql", connectionString)
	if err != nil {
		log.Fatal(err)
	}
	return repo
}

func (u ReviewsRepoMySql) FindByUserId(userId int) (*entities.Review, error) {
	review := &entities.Review{}
	statement := "SELECT userId, reviewText FROM reviews WHERE userId=?"
	err := u.db.QueryRow(statement, userId).Scan(&review.UserId, &review.ReviewText)
	if err != nil {
		return nil, err
	}
	return review, nil
}
