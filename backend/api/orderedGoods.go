package api

import (
	"bakery-project/entities"
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"log"
)

type OrderedGoodsRepoMySql struct {
	db *sql.DB
}

func (u OrderedGoodsRepoMySql) FindAll(start, count int) ([]entities.OrderedGoods, error) {
	statement := "SELECT * FROM orderedGoods LIMIT ? OFFSET ?"
	rows, err := u.db.Query(statement, count, start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	orderedGoods := []entities.OrderedGoods{}
	for rows.Next() {
		var orderedGood entities.OrderedGoods
		err := rows.Scan(&orderedGood.ID, &orderedGood.GoodID, &orderedGood.OrderID, &orderedGood.Quantity)
		if err != nil {
			return nil, err
		}
		orderedGoods = append(orderedGoods, orderedGood)
	}
	rows.Close()
	if err = rows.Err(); err != nil {
		return nil, err
	}
	return orderedGoods, nil
}

func (u OrderedGoodsRepoMySql) FindAllFromOrder(start, count, orderId int) ([]entities.OrderedGoods, error) {
	statement := "SELECT * FROM orderedGoods WHERE orderId=? LIMIT ? OFFSET ?"
	rows, err := u.db.Query(statement, orderId, count, start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	orderedGoods := []entities.OrderedGoods{}
	for rows.Next() {
		var orderedGood entities.OrderedGoods
		err := rows.Scan(&orderedGood.ID, &orderedGood.GoodID, &orderedGood.OrderID, &orderedGood.Quantity)
		if err != nil {
			return nil, err
		}
		orderedGoods = append(orderedGoods, orderedGood)
	}
	rows.Close()
	if err = rows.Err(); err != nil {
		return nil, err
	}
	return orderedGoods, nil
}

//FindById return bakedgoods by baked good ID or error otherwise
func (u *OrderedGoodsRepoMySql) FindByID(id int) (*entities.OrderedGoods, error) {
	orderedGood := &entities.OrderedGoods{}
	statement := "SELECT * from orderedGoods WHERE id = ?"
	err := u.db.QueryRow(statement, id).Scan(&orderedGood.ID, &orderedGood.GoodID, &orderedGood.OrderID, &orderedGood.Quantity)
	if err != nil {
		return nil, err
	}

	return orderedGood, nil
}

//Create creates and returns new baked good with autogenerated ID
func (u *OrderedGoodsRepoMySql) Create(orderedGood *entities.OrderedGoods) (*entities.OrderedGoods, error) {
	statement := "INSERT INTO orderedGoods(bakedGoodId, orderId, quantity) VALUES( ?, ?, ?)"
	result, err := u.db.Exec(statement, &orderedGood.GoodID, &orderedGood.OrderID, &orderedGood.Quantity)
	if err != nil {
		return nil, err
	}
	id, err := result.LastInsertId()
	orderedGood.ID = int64(id)
	//err = r.db.QueryRow("SELECT LAST_INSERT_ID()").Scan(&user.ID)
	if err != nil {
		return nil, err
	}
	return orderedGood, nil
}

//Update updates existing baked good data
func (u *OrderedGoodsRepoMySql) Update(orderedGood *entities.OrderedGoods) (*entities.OrderedGoods, error) {
	statement := "UPDATE orderedGoods SET bakedGoodId=?, orderId=?, quantity=? WHERE id=? "
	_, err := u.db.Exec(statement, orderedGood.GoodID, &orderedGood.OrderID, &orderedGood.Quantity, &orderedGood.ID)
	if err != nil {
		return nil, err
	}
	return u.FindByID(int(orderedGood.ID))
}

//DeleteById removes and returns bakedGood with specified ID or error otherwise
func (u *OrderedGoodsRepoMySql) DeleteByID(id int) (*entities.OrderedGoods, error) {
	orderedGood, err := u.FindByID(id)
	if err != nil {
		return nil, err
	}
	_, err = u.db.Exec("DELETE FROM orderedGoods WHERE id=?", id)
	return orderedGood, err
}

func NewOrderedGoodsRepoMySql(user, password, dbname string) *OrderedGoodsRepoMySql {
	connectionString := fmt.Sprintf("%s:%s@/%s?parseTime=true", user, password, dbname)
	repo := &OrderedGoodsRepoMySql{}
	var err error
	repo.db, err = sql.Open("mysql", connectionString)
	if err != nil {
		log.Fatal(err)
	}
	return repo
}

//Count returns the count of users in DB
func (u *OrderedGoodsRepoMySql) Count() (int, error) {
	var count int
	err := u.db.QueryRow("SELECT COUNT(*) FROM orderedGoods").Scan(&count)
	if err != nil {
		return 0, err
	}
	return count, nil

}
