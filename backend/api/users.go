package api

import (
	"bakery-project/entities"
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"log"
	"time"
)

type UserRepoMysql struct {
	db *sql.DB
}

func (u UserRepoMysql) FindAll(start, count int) ([]entities.User, error) {
	statement := "SELECT * FROM users LIMIT ? OFFSET ?"
	rows, err := u.db.Query(statement, count, start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	users := []entities.User{}
	for rows.Next() {
		var user entities.User
		err := rows.Scan(&user.ID, &user.Email, &user.FirstName, &user.LastName, &user.Username, &user.Password, &user.DeliveryAddress, &user.IsAdmin, &user.Created, &user.Modified)
		if err != nil {
			return nil, err
		}
		users = append(users, user)
	}
	rows.Close()
	if err = rows.Err(); err != nil {
		return nil, err
	}
	return users, nil
}

//FindById return users by user ID or error otherwise
func (u *UserRepoMysql) FindByID(id int) (*entities.User, error) {
	user := &entities.User{}
	statement := "SELECT * from users WHERE id = ?"
	err := u.db.QueryRow(statement, id).Scan(&user.ID, &user.Email, &user.FirstName, &user.LastName, &user.Username, &user.Password, &user.DeliveryAddress, &user.IsAdmin, &user.Created, &user.Modified)
	if err != nil {
		return nil, err
	}
	return user, nil
}

//Create creates and returns new user with autogenerated ID
func (u *UserRepoMysql) Create(user *entities.User) (*entities.User, error) {
	statement := "INSERT INTO users(email, first_name, last_name, username, password, delivery_address, isAdmin, created, modified) VALUES( ?, ?, ?, ?, ?, ?, ?, ?,?)"
	result, err := u.db.Exec(statement, user.Email, user.FirstName, user.LastName, user.Username,
		user.Password, user.DeliveryAddress, user.IsAdmin, user.Created, user.Modified)
	if err != nil {
		return nil, err
	}
	id, err := result.LastInsertId()
	user.ID = int64(id)
	//err = r.db.QueryRow("SELECT LAST_INSERT_ID()").Scan(&user.ID)
	if err != nil {
		return nil, err
	}
	return user, nil
}

//Update updates existing user data
func (u *UserRepoMysql) Update(user *entities.User) (*entities.User, error) {
	statement := "UPDATE users SET first_name=?, last_name=?, password=?, delivery_address=?, modified=? WHERE id=? "
	user.Modified = time.Now()
	_, err := u.db.Exec(statement, user.FirstName, user.LastName, user.Password, user.DeliveryAddress, user.Modified, user.ID)
	if err != nil {
		return nil, err
	}
	return u.FindByID(int(user.ID))
}

//DeleteById removes and returns user with specified ID or error otherwise
func (u *UserRepoMysql) DeleteByID(id int) (*entities.User, error) {
	user, err := u.FindByID(id)
	if err != nil {
		return nil, err
	}
	_, err = u.db.Exec("DELETE FROM users WHERE id=?", id)
	return user, err
}

func NewUserRepoMysql(user, password, dbname string) *UserRepoMysql {
	connectionString := fmt.Sprintf("%s:%s@/%s?parseTime=true", user, password, dbname)
	repo := &UserRepoMysql{}
	var err error
	repo.db, err = sql.Open("mysql", connectionString)
	if err != nil {
		log.Fatal(err)
	}
	return repo
}

func (u UserRepoMysql) FindByEmail(email string) (*entities.User, error) {
	user := &entities.User{}
	statement := "SELECT id, first_name, last_name, username, password, delivery_address, isAdmin, created, modified FROM users WHERE email=?"
	err := u.db.QueryRow(statement, email).Scan(&user.ID, &user.FirstName, &user.LastName, &user.Username,
		&user.Password, &user.DeliveryAddress, &user.IsAdmin, &user.Created, &user.Modified)
	if err != nil {
		return nil, err
	}
	return user, nil
}

////Count returns the count of users in DB
//func (u *UserRepoMysql) Count() (int, error) {
//	var count int
//	err := u.db.QueryRow("SELECT COUNT(*) FROM users").Scan(&count)
//	if err != nil {
//		return 0, err
//	}
//	return count, nil
//
//}
//
